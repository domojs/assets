{"version":3,"sources":["../virtual.ts"],"names":[],"mappings":"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","file":"virtual.js","sourcesContent":["import * as di from 'akala-core';\r\nimport * as debug from 'debug';\r\nimport { EventEmitter } from 'events';\r\nimport * as fs from 'fs';\r\nimport * as $ from 'underscore';\r\nimport * as mkdirp from 'mkdirp';\r\nimport * as eachAsync from 'each-async';\r\nimport * as path from 'path';\r\nimport * as gulp from 'gulp';\r\nimport * as ts from 'gulp-typescript';\r\nimport * as sourcemaps from 'gulp-sourcemaps';\r\nimport * as akala from 'akala-server';\r\n\r\n\r\nvar log = debug('domojs:assets');\r\n\r\n@di.factory(\"virtualAsset\", '$config', '$bus')\r\nexport class VirtualAssetFactory extends akala.ComponentFactory<VirtualAsset>\r\n{\r\n    constructor(config, bus)\r\n    {\r\n        super(config, bus)\r\n    }\r\n\r\n    public build()\r\n    {\r\n        return new VirtualAsset(this.bus);\r\n    }\r\n}\r\n\r\nexport class VirtualAsset extends akala.Component\r\n{\r\n    constructor(bus?: SocketIO.Socket)\r\n    {\r\n        super('virtualAsset', bus);\r\n    }\r\n\r\n    // public register() \r\n    // {\r\n    //     log('registering client virtual asset at ' + this.route);\r\n\r\n    //     this.bus.emit('virtualAsset', { name: this.name, route: this.route, moduleRelativePath: this.moduleRelativePath });\r\n    // }\r\n\r\n    public getContent(name: string, callback: (content: string) => void)\r\n    {\r\n        this.bus.emit('virtualAsset', name, callback);\r\n    }\r\n\r\n    public static getFile(modules: string[], asset: VirtualAsset, callback: Function)\r\n    {\r\n        var self = this;\r\n        log('getting file ' + asset.route);\r\n        fs.exists('./virtualAsset' + asset.route, function (exists)\r\n        {\r\n            if (!exists)\r\n            {\r\n                log('preparing virtualasset cache ' + asset.route);\r\n                mkdirp(path.dirname('./virtualAsset' + asset.route), function ()\r\n                {\r\n                    VirtualAsset.watchThenBuild(modules, asset, function ()\r\n                    {\r\n                        fs.exists('./virtualAsset' + asset.route, function (exists)\r\n                        {\r\n                            if (exists)\r\n                                callback(fs.createReadStream('./virtualAsset' + asset.route))\r\n                            else\r\n                                callback(null);\r\n                        });\r\n                    });\r\n                });\r\n            }\r\n            else\r\n                callback(fs.createReadStream('./virtualAsset' + asset.route))\r\n        });\r\n    }\r\n\r\n    public static watchThenBuild(modules: string[], asset: VirtualAsset, callback?: Function)\r\n    {\r\n        log('watching then building virtual asset', asset.name || asset.route);\r\n        gulp.add('watch-' + (asset.name || asset.route), function ()\r\n        {\r\n            gulp.watch('./modules/\\*' + asset.moduleRelativePath, ['build-' + (asset.name || asset.route)]);\r\n        });\r\n        //     modules.forEach(function (module)\r\n        //     {\r\n        //         fs.exists('./modules/' + module + asset.moduleRelativePath, function (exists)\r\n        //         {\r\n\r\n        //             if (exists)\r\n        //                 fs.watchFile('./modules/' + module + asset.moduleRelativePath, function ()\r\n        //                 {\r\n        //                     VirtualAsset.build(modules, asset);\r\n        //                 });\r\n        //         })\r\n        //     });\r\n\r\n        VirtualAsset.build(modules, asset, callback)\r\n\r\n        gulp.start(['watch-' + (asset.name || asset.route), 'build-' + (asset.name || asset.route)])\r\n    }\r\n\r\n    public static build(modules: string[], asset: VirtualAsset, callback?: Function)\r\n    {\r\n        log('building virtual asset', asset.name || asset.route);\r\n        if (!gulp.hasTask('build-' + (asset.name || asset.route)))\r\n            gulp.add('build-' + (asset.name || asset.route), function ()\r\n            {\r\n                var project = ts.createProject(asset.tsconfig, { outFile: path.basename(asset.route), module: 'amd', target: 'es6', experimentalDecorators: true });\r\n                gulp.src('./modules/\\*' + asset.moduleRelativePath)\r\n                    .pipe(sourcemaps.init())\r\n                    .pipe(project())\r\n                    .pipe(sourcemaps.write())\r\n                    .pipe(gulp.dest('./virtualAsset' + path.dirname(asset.route)));\r\n            });\r\n        if (callback)\r\n        {\r\n            let callbackCalled = false;\r\n            gulp.start(['build-' + (asset.name || asset.route)]).on('stop', function ()\r\n            {\r\n                if (!callbackCalled)\r\n                    callback();\r\n                callbackCalled = true;\r\n            });\r\n        }\r\n        // var output = fs.createWriteStream('./virtualAsset' + asset.route);\r\n\r\n        // eachAsync(modules, function (module, i, next)\r\n        // {\r\n        //     log('testing ./modules/' + module + asset.moduleRelativePath);\r\n        //     fs.exists('./modules/' + module + asset.moduleRelativePath, function (exists)\r\n        //     {\r\n        //         if (exists)\r\n        //         {\r\n        //             log('found ./modules/' + module + asset.moduleRelativePath);\r\n        //             var s = fs.createReadStream('./modules/' + module + asset.moduleRelativePath);\r\n        //             s.pipe(output, { end: false });\r\n        //             s.on('end', next);\r\n        //         }\r\n        //         else\r\n        //             next();\r\n        //     })\r\n        // }, function ()\r\n        //     {\r\n        //         output.end();\r\n        //         if (callback)\r\n        //             callback();\r\n        //     });\r\n    }\r\n\r\n\r\n    public moduleRelativePath: string;\r\n    public route: string;\r\n    public name: string;\r\n    public tsconfig: string;\r\n}\r\n"],"sourceRoot":"assets/src/server"}