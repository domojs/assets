{"version":3,"sources":["../master.ts"],"names":[],"mappings":";AAAA,+BAAiC;AACjC,6BAA+B;AAC/B,iCAAmC;AACnC,IAAI,GAAG,GAAG,KAAK,CAAC,cAAc,CAAC,CAAC;AAChC,8BAAgC;AAEhC,8BAAgC;AAGhC,IAAI,MAAM,GAAG,EAAE,CAAC;AAChB,EAAE,CAAC,cAAc,CAAC,CAAC,SAAS,EAAE,WAAW,EAAE,iBAAiB,EAAE,WAAW,CAAC,EAAE,UAAU,MAAsB,EAAE,OAAiB,EAAE,aAAiD,EAAE,OAAwB;IAGxM,IAAI,MAAM,GAAG,EAAE,CAAC;IAChB,IAAI,kBAAkB,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC;IAE1C,MAAM,CAAC,GAAG,CAAC,SAAS,EAAE,kBAAkB,CAAC,CAAC;IAE1C,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,EAAE,UAAU,MAAM;QAE/C,EAAE,CAAC,CAAC,MAAM,IAAI,QAAQ,CAAC;YACnB,MAAM,CAAC;QACX,GAAG,CAAC,4BAA4B,EAAE,MAAM,CAAC,CAAC;QAC1C,aAAa,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,cAAc,EAAE,UAAU,KAAsB;YAErE,GAAG,CAAC,eAAe,EAAE,KAAK,CAAC,CAAC;YAC5B,aAAa,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,cAAc,EAAE,KAAK,CAAC,CAAC;YACpD,GAAG,CAAC,cAAc,EAAE,KAAK,CAAC,CAAC;QAC/B,CAAC,CAAC,CAAA;IACN,CAAC,CAAC,CAAC;IAEH,OAAO,CAAC,EAAE,CAAC,YAAY,EAAE,UAAU,MAAM;QAErC,MAAM,CAAC,EAAE,CAAC,cAAc,EAAE,UAAU,KAAsB;YAEtD,GAAG,CAAC,eAAe,EAAE,KAAK,CAAC,CAAC;YAC5B,EAAE,CAAC,YAAY,CAAC,cAAc,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;YAC/C,uDAAuD;YACvD,kBAAkB,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK,EAAE,UAAU,GAAG,EAAE,GAAG,EAAE,IAAI;gBAExD,EAAE,CAAC,YAAY,CAAC,OAAO,CAAC,OAAO,EAAE,KAAK,EAAE,UAAU,CAAgB;oBAE9D,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;wBACH,GAAG,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC;oBAC9B,IAAI;wBACA,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;gBACpB,CAAC,CAAC,CAAA;YACN,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,EAAE,CAAC","file":"master.js","sourcesContent":["import * as di from 'akala-core';\r\nimport * as debug from 'debug';\r\nimport * as express from 'express';\r\nvar log = debug('domojs:asset');\r\nimport * as va from './virtual';\r\nimport * as io from 'socket.io';\r\nimport * as $ from 'underscore';\r\nimport * as fs from 'fs';\r\n\r\nvar assets = {};\r\ndi.injectWithName(['$router', '$$modules', '$$socketModules', '$$sockets'], function (router: express.Router, modules: string[], socketModules: { [key: string]: SocketIO.Socket }, sockets: SocketIO.Server)\r\n{\r\n\r\n    var assets = {};\r\n    var virtualAssetRouter = express.Router();\r\n\r\n    router.use('/assets', virtualAssetRouter);\r\n\r\n    $.each(Object.keys(socketModules), function (socket)\r\n    {\r\n        if (socket == 'assets')\r\n            return;\r\n        log('registering forward for %s', socket);\r\n        socketModules[socket].on('virtualAsset', function (asset: va.VirtualAsset)\r\n        {\r\n            log('forwarding %s', asset);\r\n            socketModules['assets'].emit('virtualAsset', asset);\r\n            log('forwarded %s', asset);\r\n        })\r\n    });\r\n\r\n    sockets.on('connection', function (socket)\r\n    {\r\n        socket.on('virtualAsset', function (asset: va.VirtualAsset)\r\n        {\r\n            log('forwarding %s', asset);\r\n            va.VirtualAsset.watchThenBuild(modules, asset);\r\n            // socketModules['assets'].emit('virtualAsset', asset);\r\n            virtualAssetRouter.use(asset.route, function (req, res, next)\r\n            {\r\n                va.VirtualAsset.getFile(modules, asset, function (s: fs.ReadStream)\r\n                {\r\n                    if (!s)\r\n                        res.sendStatus(404).end();\r\n                    else\r\n                        s.pipe(res);\r\n                })\r\n            });\r\n        });\r\n    });\r\n})();"],"sourceRoot":"assets/src/server"}